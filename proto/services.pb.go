// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	StringMessage
	BlankQuery
	IDQuery
	ExercisesList
	Exercise
	Question
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type StringMessage struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *StringMessage) Reset()                    { *m = StringMessage{} }
func (m *StringMessage) String() string            { return proto1.CompactTextString(m) }
func (*StringMessage) ProtoMessage()               {}
func (*StringMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StringMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type BlankQuery struct {
}

func (m *BlankQuery) Reset()                    { *m = BlankQuery{} }
func (m *BlankQuery) String() string            { return proto1.CompactTextString(m) }
func (*BlankQuery) ProtoMessage()               {}
func (*BlankQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type IDQuery struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IDQuery) Reset()                    { *m = IDQuery{} }
func (m *IDQuery) String() string            { return proto1.CompactTextString(m) }
func (*IDQuery) ProtoMessage()               {}
func (*IDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IDQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExercisesList struct {
	Exercises []*Exercise `protobuf:"bytes,1,rep,name=exercises" json:"exercises,omitempty"`
}

func (m *ExercisesList) Reset()                    { *m = ExercisesList{} }
func (m *ExercisesList) String() string            { return proto1.CompactTextString(m) }
func (*ExercisesList) ProtoMessage()               {}
func (*ExercisesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExercisesList) GetExercises() []*Exercise {
	if m != nil {
		return m.Exercises
	}
	return nil
}

type Exercise struct {
	Id        int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Topic     string      `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	Questions []*Question `protobuf:"bytes,4,rep,name=questions" json:"questions,omitempty"`
}

func (m *Exercise) Reset()                    { *m = Exercise{} }
func (m *Exercise) String() string            { return proto1.CompactTextString(m) }
func (*Exercise) ProtoMessage()               {}
func (*Exercise) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Exercise) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Exercise) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Exercise) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Exercise) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type Question struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ExerciseId int64  `protobuf:"varint,2,opt,name=exercise_id,json=exerciseId" json:"exercise_id,omitempty"`
	Text       string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Answer     string `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto1.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Question) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Question) GetExerciseId() int64 {
	if m != nil {
		return m.ExerciseId
	}
	return 0
}

func (m *Question) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Question) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto1.RegisterType((*StringMessage)(nil), "proto.StringMessage")
	proto1.RegisterType((*BlankQuery)(nil), "proto.BlankQuery")
	proto1.RegisterType((*IDQuery)(nil), "proto.IDQuery")
	proto1.RegisterType((*ExercisesList)(nil), "proto.ExercisesList")
	proto1.RegisterType((*Exercise)(nil), "proto.Exercise")
	proto1.RegisterType((*Question)(nil), "proto.Question")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	APIVersion(ctx context.Context, in *BlankQuery, opts ...grpc.CallOption) (*StringMessage, error)
	ListExercises(ctx context.Context, in *BlankQuery, opts ...grpc.CallOption) (*ExercisesList, error)
	FetchExercise(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Exercise, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) APIVersion(ctx context.Context, in *BlankQuery, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := grpc.Invoke(ctx, "/proto.Service/APIVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListExercises(ctx context.Context, in *BlankQuery, opts ...grpc.CallOption) (*ExercisesList, error) {
	out := new(ExercisesList)
	err := grpc.Invoke(ctx, "/proto.Service/ListExercises", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FetchExercise(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Exercise, error) {
	out := new(Exercise)
	err := grpc.Invoke(ctx, "/proto.Service/FetchExercise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	APIVersion(context.Context, *BlankQuery) (*StringMessage, error)
	ListExercises(context.Context, *BlankQuery) (*ExercisesList, error)
	FetchExercise(context.Context, *IDQuery) (*Exercise, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_APIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).APIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/APIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).APIVersion(ctx, req.(*BlankQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/ListExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListExercises(ctx, req.(*BlankQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FetchExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FetchExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/FetchExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FetchExercise(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "APIVersion",
			Handler:    _Service_APIVersion_Handler,
		},
		{
			MethodName: "ListExercises",
			Handler:    _Service_ListExercises_Handler,
		},
		{
			MethodName: "FetchExercise",
			Handler:    _Service_FetchExercise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto1.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0xa6, 0x7f, 0xa7, 0xa6, 0xe2, 0x52, 0x64, 0xed, 0xc5, 0xb2, 0x5e, 0x7a, 0xb1,
	0x87, 0x7a, 0x10, 0x3c, 0x08, 0x8a, 0x0a, 0x01, 0x05, 0x9b, 0x82, 0x57, 0x49, 0x93, 0x21, 0x2e,
	0x96, 0xa4, 0xee, 0x6e, 0xb4, 0xfd, 0x5a, 0x7e, 0x42, 0xc9, 0x66, 0xd7, 0x90, 0x0a, 0x9e, 0x32,
	0xf3, 0x63, 0xb2, 0xef, 0xf1, 0x1e, 0x0c, 0x25, 0x8a, 0x4f, 0x1e, 0xa1, 0x9c, 0x6d, 0x44, 0xa6,
	0x32, 0xd2, 0xd6, 0x1f, 0x76, 0x06, 0xde, 0x52, 0x09, 0x9e, 0x26, 0x4f, 0x28, 0x65, 0x98, 0x20,
	0x21, 0xd0, 0x5a, 0x65, 0xf1, 0x8e, 0x3a, 0x13, 0x67, 0xda, 0x0f, 0xf4, 0xcc, 0x0e, 0x00, 0x6e,
	0xd7, 0x61, 0xfa, 0xbe, 0xc8, 0x51, 0xec, 0xd8, 0x09, 0x74, 0xfd, 0x3b, 0x3d, 0x92, 0x21, 0x34,
	0x79, 0xac, 0x4f, 0xdd, 0xa0, 0xc9, 0x63, 0x76, 0x0d, 0xde, 0xfd, 0x16, 0x45, 0xc4, 0x25, 0xca,
	0x47, 0x2e, 0x15, 0x39, 0x87, 0x3e, 0x5a, 0x40, 0x9d, 0x89, 0x3b, 0x1d, 0xcc, 0x0f, 0x4b, 0x03,
	0x33, 0x7b, 0x18, 0x54, 0x17, 0x2c, 0x87, 0x9e, 0xc5, 0xfb, 0x6f, 0x93, 0x11, 0xb4, 0x15, 0x57,
	0x6b, 0xa4, 0x4d, 0xed, 0xac, 0x5c, 0x34, 0xcd, 0x36, 0x3c, 0xa2, 0xae, 0xa1, 0xc5, 0x52, 0xc8,
	0x7e, 0xe4, 0x28, 0x15, 0xcf, 0x52, 0x49, 0x5b, 0x35, 0xd9, 0x85, 0xe1, 0x41, 0x75, 0xc1, 0x12,
	0xe8, 0x59, 0xfc, 0x47, 0xf6, 0x14, 0x06, 0xd6, 0xdf, 0x2b, 0x8f, 0xb5, 0xb8, 0x1b, 0x80, 0x45,
	0x7e, 0x5c, 0x04, 0xa6, 0x70, 0xab, 0x8c, 0x01, 0x3d, 0x93, 0x63, 0xe8, 0x84, 0xa9, 0xfc, 0x42,
	0x41, 0x5b, 0x9a, 0x9a, 0x6d, 0xfe, 0xed, 0x40, 0x77, 0x59, 0xf6, 0x40, 0x2e, 0x01, 0x6e, 0x9e,
	0xfd, 0x17, 0x14, 0xb2, 0x90, 0x3d, 0x32, 0xf6, 0xaa, 0x9c, 0xc7, 0x23, 0x83, 0x6a, 0xfd, 0xb0,
	0x06, 0xb9, 0x02, 0xaf, 0xc8, 0xf6, 0x37, 0xe8, 0xff, 0xfe, 0xad, 0xb5, 0xc1, 0x1a, 0x64, 0x0e,
	0xde, 0x03, 0xaa, 0xe8, 0xad, 0x4a, 0xd9, 0x1c, 0x9a, 0x46, 0xc7, 0xfb, 0xed, 0xb0, 0xc6, 0xaa,
	0xa3, 0xc9, 0xc5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0xd6, 0x23, 0x40, 0x42, 0x02, 0x00,
	0x00,
}
